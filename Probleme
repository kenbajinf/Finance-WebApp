Als ich im terminal tailwindcss und postcss installieren wollte in unserem Programm mit diesem command "npm i -D tailwindcss postcss autoprefixer", hat mir das Terminal angzeigt, dass es viele probleme gibt mit den packages: 156 vulnerabilities (1 low, 125 moderate, 25 high, 5 critical)
Dann hat mich Herr Lauk drauf hingewiesen, dass ich mit diesen Packages so arbeiten kann, aber es viele probleme geben kann und ich eventuell andere Versionen brauche für dieses Projekt. Herr Lauk hat mir einen hinweisen gegeben, dass ich mich mit gitignore befassen soll und in
meinem Programm gitignore fixe, da es dort einen Fehler gibt.

Was ist Gitignore und was macht es in meinem Programm?

Aus meinen Recherchen konnte ich feststellen, dass in der Gitignore Datei festgelegt wird welche Dateien vom Programm ind Git ignoriert werden sollen. So sieht mein gitignore file aus: 
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*


In der Gitignore file ist mir /node_modules direkt aufgefallen und dachte das dies problem gemacht hat. Ich habe mich dann weiter damit beschäftigt um zu sehen ob das Probleme gemacht hat. Ich habe dann gelesen, dass man node modules aus verschiedenen gründne in git ignoriert:

Der Ordner node_modules enthält alle Abhängigkeiten (Packages), die für dein Projekt installiert wurden. Dieser Ordner kann sehr groß sein und enthält Dateien, die durch die Installation von npm oder yarn jederzeit wiederhergestellt werden können. Das Versionieren von node_modules bringt mehrere Nachteile mit sich:

Speicherplatz und Performance: Das Hinzufügen von node_modules zu Git bläht dein Repository unnötig auf und macht es langsamer.
Plattformabhängigkeit: Einige Dateien in node_modules sind möglicherweise plattformspezifisch und können auf verschiedenen Betriebssystemen zu Problemen führen.
Wiederholbarkeit: Alle benötigten Abhängigkeiten sind in der Datei package.json und package-lock.json (oder yarn.lock) festgehalten. Jeder, der dein Projekt klont, kann einfach npm install ausführen, um exakt die gleichen Abhängigkeiten zu installieren.


Herr Lauk meinte, dass es einen Fehler bei /coverage hat habe es bis jetzt nicht herausgefunden. Ich habe aber versucht es umzuschreiben in **/coverage damit der ordner clients und server damit einbezogen sind.
